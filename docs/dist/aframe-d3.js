webpackJsonp([6],{

/***/ 512:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _d = __webpack_require__(4);

var d3 = _interopRequireWildcard(_d);

__webpack_require__(1);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// fake data
var data = [10, 20, 30, 15, 25, 35, 40, 45, 50, 70, 100, 120, 130, 12, 18, 22, 29, 33, 44, 59, 200];

// we scale the height of our bars using d3's linear scale
var hscale = d3.scaleLinear().domain([0, d3.max(data)]).range([0, 3]);

// we select the scene object just like an svg
var scene = d3.select("#jenga");

// we use d3's enter/update/exit pattern to draw and bind our dom elements
var bars = scene.selectAll("a-box").data(data);
bars.enter().append("a-box")
// we set attributes on our cubes to determine how they are rendered
.attr("position", function (d, i) {
    // cubes are positioned by their center so we
    // offset for their height
    var y = 1 + hscale(d) / 2;
    // lets place the bars all around our camera
    var radius = 5;
    var theta = i / data.length * 2 * Math.PI - 3 / 4 * Math.PI;
    var x = radius * Math.cos(theta);
    var z = radius * Math.sin(theta);
    var position = x + " " + y + " " + z;
    console.log("position", i, ": ", position);
    return position;
}).attr("rotation", function (d, i) {
    var x = 0;
    var z = 0;
    var y = -(i / data.length) * 360 - 45;
    return x + " " + y + " " + z;
}).attr("width", 0.5).attr("depth", 0.9).attr("height", function (d) {
    return hscale(d);
}).attr("opacity", function (d, i) {
    return 0.6 + i / data.length * 0.4;
}).on("click", function (d, i) {
    console.log("click", i, d);
}).on("mouseenter", function (d, i) {
    // this event gets fired continuously as long as the cursor
    // is over the element. we only want trigger our animation the first time
    if (this.hovering) return;
    console.log("hover", i, d);
    this.hovering = true;
    d3.select(this).transition().duration(1000).attr({
        metalness: 0.5,
        width: 2
    });
}).on("mouseleave", function (d, i) {
    console.log("leave", i, d);
    this.hovering = false;
    d3.select(this).transition().attr({
        metalness: 0,
        width: 0.5
    });
});

/***/ })

},[512]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hZnJhbWUtZDMuanMiXSwibmFtZXMiOlsiZDMiLCJkYXRhIiwiaHNjYWxlIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJtYXgiLCJyYW5nZSIsInNjZW5lIiwic2VsZWN0IiwiYmFycyIsInNlbGVjdEFsbCIsImVudGVyIiwiYXBwZW5kIiwiYXR0ciIsImQiLCJpIiwieSIsInJhZGl1cyIsInRoZXRhIiwibGVuZ3RoIiwiTWF0aCIsIlBJIiwieCIsImNvcyIsInoiLCJzaW4iLCJwb3NpdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJvbiIsImhvdmVyaW5nIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwibWV0YWxuZXNzIiwid2lkdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0lBQVlBLEU7O0FBQ1o7Ozs7QUFFQTtBQUNBLElBQUlDLE9BQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsRUFBYSxFQUFiLEVBQWlCLEVBQWpCLEVBQXFCLEVBQXJCLEVBQXlCLEVBQXpCLEVBQ1AsRUFETyxFQUNILEVBREcsRUFDQyxFQURELEVBQ0ssR0FETCxFQUNVLEdBRFYsRUFDZSxHQURmLEVBRVAsRUFGTyxFQUVILEVBRkcsRUFFQyxFQUZELEVBRUssRUFGTCxFQUVTLEVBRlQsRUFFYSxFQUZiLEVBRWlCLEVBRmpCLEVBRXFCLEdBRnJCLENBQVg7O0FBSUE7QUFDQSxJQUFJQyxTQUFTRixHQUFHRyxXQUFILEdBQ1JDLE1BRFEsQ0FDRCxDQUFDLENBQUQsRUFBSUosR0FBR0ssR0FBSCxDQUFPSixJQUFQLENBQUosQ0FEQyxFQUVSSyxLQUZRLENBRUYsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUZFLENBQWI7O0FBSUE7QUFDQSxJQUFJQyxRQUFRUCxHQUFHUSxNQUFILENBQVUsUUFBVixDQUFaOztBQUVBO0FBQ0EsSUFBSUMsT0FBT0YsTUFBTUcsU0FBTixDQUFnQixPQUFoQixFQUF5QlQsSUFBekIsQ0FBOEJBLElBQTlCLENBQVg7QUFD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cm9tIFwiZDNcIjtcbmltcG9ydCBcImQzLXNlbGVjdGlvblwiO1xuXG4vLyBmYWtlIGRhdGFcbnZhciBkYXRhID0gWzEwLCAyMCwgMzAsIDE1LCAyNSwgMzUsIDQwLFxuICAgIDQ1LCA1MCwgNzAsIDEwMCwgMTIwLCAxMzAsXG4gICAgMTIsIDE4LCAyMiwgMjksIDMzLCA0NCwgNTksIDIwMF1cblxuLy8gd2Ugc2NhbGUgdGhlIGhlaWdodCBvZiBvdXIgYmFycyB1c2luZyBkMydzIGxpbmVhciBzY2FsZVxudmFyIGhzY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFswLCBkMy5tYXgoZGF0YSldKVxuICAgIC5yYW5nZShbMCwgM10pXG5cbi8vIHdlIHNlbGVjdCB0aGUgc2NlbmUgb2JqZWN0IGp1c3QgbGlrZSBhbiBzdmdcbnZhciBzY2VuZSA9IGQzLnNlbGVjdChcIiNqZW5nYVwiKTtcblxuLy8gd2UgdXNlIGQzJ3MgZW50ZXIvdXBkYXRlL2V4aXQgcGF0dGVybiB0byBkcmF3IGFuZCBiaW5kIG91ciBkb20gZWxlbWVudHNcbnZhciBiYXJzID0gc2NlbmUuc2VsZWN0QWxsKFwiYS1ib3hcIikuZGF0YShkYXRhKVxuYmFycy5lbnRlcigpLmFwcGVuZChcImEtYm94XCIpXG4gICAgLy8gd2Ugc2V0IGF0dHJpYnV0ZXMgb24gb3VyIGN1YmVzIHRvIGRldGVybWluZSBob3cgdGhleSBhcmUgcmVuZGVyZWRcbiAgICAuYXR0cihcInBvc2l0aW9uXCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgIC8vIGN1YmVzIGFyZSBwb3NpdGlvbmVkIGJ5IHRoZWlyIGNlbnRlciBzbyB3ZVxuICAgICAgICAvLyBvZmZzZXQgZm9yIHRoZWlyIGhlaWdodFxuICAgICAgICB2YXIgeSA9IDEgKyBoc2NhbGUoZCkgLyAyO1xuICAgICAgICAvLyBsZXRzIHBsYWNlIHRoZSBiYXJzIGFsbCBhcm91bmQgb3VyIGNhbWVyYVxuICAgICAgICB2YXIgcmFkaXVzID0gNTtcbiAgICAgICAgdmFyIHRoZXRhID0gaSAvIGRhdGEubGVuZ3RoICogMiAqIE1hdGguUEkgLSAzIC8gNCAqIE1hdGguUElcbiAgICAgICAgdmFyIHggPSByYWRpdXMgKiBNYXRoLmNvcyh0aGV0YSlcbiAgICAgICAgdmFyIHogPSByYWRpdXMgKiBNYXRoLnNpbih0aGV0YSlcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB4ICsgXCIgXCIgKyB5ICsgXCIgXCIgKyB6O1xuICAgICAgICBjb25zb2xlLmxvZyhcInBvc2l0aW9uXCIsIGksIFwiOiBcIiwgcG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgfSlcbiAgICAuYXR0cihcInJvdGF0aW9uXCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgIHZhciB4ID0gMDtcbiAgICAgICAgdmFyIHogPSAwO1xuICAgICAgICB2YXIgeSA9IC0oaSAvIGRhdGEubGVuZ3RoKSAqIDM2MCAtIDQ1O1xuICAgICAgICByZXR1cm4geCArIFwiIFwiICsgeSArIFwiIFwiICsgelxuICAgIH0pXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCAwLjUpXG4gICAgLmF0dHIoXCJkZXB0aFwiLCAwLjkpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIGhzY2FsZShkKVxuICAgIH0pXG4gICAgLmF0dHIoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgIHJldHVybiAwLjYgKyAoaSAvIGRhdGEubGVuZ3RoKSAqIDAuNFxuICAgIH0pXG4gICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjbGlja1wiLCBpLCBkKVxuICAgIH0pXG4gICAgLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAvLyB0aGlzIGV2ZW50IGdldHMgZmlyZWQgY29udGludW91c2x5IGFzIGxvbmcgYXMgdGhlIGN1cnNvclxuICAgICAgICAvLyBpcyBvdmVyIHRoZSBlbGVtZW50LiB3ZSBvbmx5IHdhbnQgdHJpZ2dlciBvdXIgYW5pbWF0aW9uIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIGlmICh0aGlzLmhvdmVyaW5nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaG92ZXJcIiwgaSwgZClcbiAgICAgICAgdGhpcy5ob3ZlcmluZyA9IHRydWU7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICBtZXRhbG5lc3M6IDAuNSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgfSlcbiAgICB9KVxuICAgIC5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJsZWF2ZVwiLCBpLCBkKVxuICAgICAgICB0aGlzLmhvdmVyaW5nID0gZmFsc2U7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICBtZXRhbG5lc3M6IDAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAuNVxuICAgICAgICAgICAgfSlcbiAgICB9KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYWZyYW1lLWQzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==